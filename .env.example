# Database Configuration
DATABASE_URL=sqlite:///./teckochecker.db

# Security - REQUIRED
# SECRET_KEY is used to encrypt API keys and tokens stored in the database
# Generate a secure key with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
SECRET_KEY=your-secret-key-here-change-this-in-production

# Polling Configuration
DEFAULT_POLL_INTERVAL=120
MIN_POLL_INTERVAL=30
MAX_POLL_INTERVAL=3600
MAX_RETRIES=3
RETRY_DELAY=60

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_TITLE=TeckoChecker API
API_VERSION=0.1.0
API_DESCRIPTION=Polling orchestration system for monitoring asynchronous jobs

# CORS Configuration
# NOTE: CORS is disabled by default since Web UI is served from the same origin.
# Empty list = CORS disabled = only same-origin requests allowed (secure default).
# If you need to allow external tools, add specific origins like:
# CORS_ORIGINS=["https://external-tool.example.com"]
# SECURITY WARNING: Never use ["*"] with CORS_ALLOW_CREDENTIALS=true - browsers reject this.
CORS_ORIGINS=[]
CORS_ALLOW_CREDENTIALS=false
CORS_ALLOW_METHODS=["GET","POST","PUT","DELETE"]
CORS_ALLOW_HEADERS=["Content-Type","Authorization"]

# Logging Configuration
# LOG_LEVEL: Controls verbosity of log output
#   - DEBUG: Detailed diagnostic information (most verbose)
#   - INFO: General informational messages (recommended for production)
#   - WARNING: Warning messages for unexpected situations
#   - ERROR: Error messages for serious problems
#   - CRITICAL: Critical errors that may cause application failure
LOG_LEVEL=INFO

# LOG_FILE: Path to log file for persistent logging
#   - Leave empty to log only to console
#   - Set to file path (e.g., ./teckochecker.log) to log to both console and file
#   - Logs are appended if file exists
LOG_FILE=

# Rate Limiting Configuration
# RATE_LIMIT_ENABLED: Enable/disable rate limiting globally
RATE_LIMIT_ENABLED=true

# Rate limits per endpoint type (format: "<count>/<period>")
# Periods: second, minute, hour, day
# Examples: "100/minute", "10/second", "1000/hour"

# RATE_LIMIT_DEFAULT: Default limit for all endpoints (if not specified by type)
RATE_LIMIT_DEFAULT=100/minute

# RATE_LIMIT_READ: Limit for read operations (GET requests)
# More permissive since reads are less resource-intensive
RATE_LIMIT_READ=200/minute

# RATE_LIMIT_WRITE: Limit for write operations (POST/PUT/DELETE requests)
# More restrictive to prevent abuse and database overload
RATE_LIMIT_WRITE=50/minute

# Note: /api/health endpoint is EXEMPT from rate limiting for monitoring tools

# Application
DEBUG=false
ENVIRONMENT=development
